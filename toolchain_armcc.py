from toolchain import *
from os import path, listdir
import exceptions

class ToolchainARMCC(Toolchain):
    def __init__(self, armccFolder, cpu="Cortex-M0"):
        Toolchain.__init__(self, "ARMCC")
        self.cflags = ["-c", "--cpu=" + cpu, "-g", "--apcs=interwork"]
        self.asmflags = ["--cpu=" + cpu, "-g", "--apcs=interwork"]
        self.linkflags = ['--strict', '--no_remove', '--summary_stderr', '--info', 'summarysizes', '--map', '--xref', '--symbols', '--info', 'sizes', '--info', 'totals', '--info', 'unused', '--info', 'veneers']
        self.linkerfileext = "sct"
        self.options["warning"] = {"none": "-W", "all": ""}
        self.options["map"] = "--list"
        self.options["linker"] = "--scatter"
        packfolder = os.path.join(armccFolder, "..", "Pack")
        cmsis = os.path.join(packfolder, "ARM", "CMSIS")
        packs = [d for d in os.listdir(cmsis)]

        self.includedirs = [os.path.join(cmsis, packs[-1], "CMSIS", "Include")]

#nordic specific stuffz
        nordicdir = os.path.join(packfolder, "NordicSemiconductor")
        try:
            nordicdir = os.path.join(nordicdir, [d for d in os.listdir(nordicdir)][-1])
            nordicdir = os.path.join(nordicdir, [d for d in os.listdir(nordicdir)][-1])
            nordicdir = os.path.join(nordicdir, "Device", "Include")
            if not os.path.exists(nordicdir):
                raise Exception()
        except:
            raise Exception("Nordic directory not found. Please install the MDK.")
        self.includedirs.append(nordicdir)


        self.CC = os.path.join(armccFolder, "bin", "armcc.exe")
        self.AS = os.path.join(armccFolder, "bin", "armasm.exe")
        self.AR = os.path.join(armccFolder, "bin", "armar.exe")
        self.LD = os.path.join(armccFolder, "bin", "armlink.exe")
        self.NM = os.path.join(armccFolder, "bin", "armlink.exe --symbols")
        self.OBJCOPY = os.path.join(armccFolder, "bin", "fromelf.exe")
        self.SIZE = os.path.join(armccFolder, "bin", "armar.exe")

    def scatterGen(self, target):
        """
        Generate content text for a scatterfile for the given target.
        returns (Success (True/False), scatterfile text)
        """
        out =   "; ****************************\n"\
                "; Scatter file (AUTOGENERATED)\n"\
                "; ****************************\n\n"

        for (i, region) in enumerate(target.romRegions):
            out += "LR_ROM" +    str(i + 1) + " 0x" + format(region.start, "X") + " 0x" + format(region.size, "X") + " {\n"
            out += "\tER_IROM" + str(i + 1) + " 0x" + format(region.start, "X") + " 0x" + format(region.size, "X") + " {\n"
            if region.init:
                out += "\t\t*.o (RESET, +First)\n"
                out += "\t\t*(InRoot$$Sections)\n"
            out += "\t\t.ANY (+RO)\n"
            out += "\t}\n"
            if region.init:
                for (i, region) in enumerate(target.ramRegions):
                    out += "\tRW_IRAM" + str(i + 1) + " 0x" + format(region.start, "X")
                    if not region.init:
                        out += " UNINIT"
                    out += " 0x" + format(region.size, "X") + " {\n"
                    out += "\t\t.ANY (+RW +ZI)\n"
                    out += "\t}\n"
            out += "}\n"
        return (True, out)

    def toHex(self, target, elf):
        """
        Generate hex-file from elf.
        returns (Success (True/False), output)
        """
        popen = subprocess.Popen([self.OBJCOPY, "--i32combined", "--output", os.path.join(target.outputdir, target.outputname + ".hex"), elf], stdout=subprocess.PIPE, stderr=subprocess.PIPE, cwd=target.cwd)
        (out,err) = popen.communicate()
        if popen.returncode != 0:
            return (False, err)
        return (True, out)

